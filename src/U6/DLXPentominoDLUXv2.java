package U6;

import java.util.Scanner;

public class DLXPentominoDLUXv2 {
  int n = 0;
  int col;
  int[][] mat;


  public DLXPentominoDLUXv2(int n) {
    this.n = n;
    this.col = n * 7;
    this.mat = createMatix();
  }

  private int[][] createMatix() {
    int col = n * 7;

    int[][] d = getDomino();
    int[][] l = getL();
    int[][] u = getU();
    int[][] x = getX();


    int[][] m = new int[col][];


    return m;
  }

  private int[][] getX() {

    int[][] a = new int[3][col];
    return a;
  }

  private int[][] getU() {
    int[][] x = {
         //21
        {0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
    };

    int[][] a = new int[3][col];
    return a;
  }

  private int[][] getL() {
    //   1,2,3,4,5,6,7,8,9,1,1,2,3,4,5,6,7,8,9,2,1,2,3,4,5,6,7,8
    //  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    int[][] l = {
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0},
        {0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1},
    };
    int[][] lYGespiegelt = {
        {0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0},
        {0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0},
        {0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0},
        {0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1},
    };
    int[][] lXGespiegelt = {
        {1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0},
        {0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0},
    };
    int[][] lXYGespiegelt = {

        {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0},
        {0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0},
        {0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0},
        {0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0},
        {0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0},
        {0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1},
    };
    int[][] lImUhrzeigersinn = {
        {1,1,1,1,0,0,0,1,0,0,0,0,0,0},
        {0,1,1,1,1,0,0,0,1,0,0,0,0,0},
        {0,0,1,1,1,1,0,0,0,1,0,0,0,0},
        {0,0,0,1,1,1,1,0,0,0,1,0,0,0},
    };
    int[][] lImUhrzeigersinnXGespiegelt = {
        {1,0,0,0,0,0,0,1,1,1,1,0,0,0},
        {0,1,0,0,0,0,0,0,1,1,1,1,0,0},
        {0,0,1,0,0,0,0,0,0,1,1,1,1,0},
        {0,0,0,1,0,0,0,0,0,0,1,1,1,1},
    };
    int[][] lGegenUhrzeigersinn = {
        {0,0,0,1,0,0,0,1,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,1,1,1,1,0,0},
        {0,0,0,0,0,1,0,0,0,1,1,1,1,0},
        {0,0,0,0,0,0,1,0,0,0,1,1,1,1},
    };
    int[][] lGegenUhrzeigersinnXGespiegelt = {
        {1,1,1,1,0,0,0,0,0,0,1,0,0,0},
        {0,1,1,1,1,0,0,0,0,0,0,1,0,0},
        {0,0,1,1,1,1,0,0,0,0,0,0,1,0},
        {0,0,0,1,1,1,1,0,0,0,0,0,0,1},
    };





    int[][] a = new int[3][col];

    return a;
  }

  private int[][] getDomino() {
    int[][] dominoW = {
        {1, 1, 0, 0, 0, 0, 0},
        {0, 1, 1, 0, 0, 0, 0},
        {0, 0, 1, 1, 0, 0, 0},
        {0, 0, 0, 1, 1, 0, 0},
        {0, 0, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, 1, 1}
    };
    int[][] dominoS = {
        {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
        {0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1}
    };


    int m = 13 * n - 7;
    int[][] a = new int[m][col];


    for (int i = 0; i < n * 13 - 7; i++) {
      for (int col = 0; col < this.col; col++) {
        if (i < n * 6) {
          if (i < 6) {
            if (col < 7) {
              a[i][col] = dominoW[i][col];
            }
          } else {
            if (col >= i / 6 * 7 && col < (i / 6 + 1) * 7) {
              a[i][col] = dominoW[i % 6][col % 7];
            }
          }
        } else {
          if (i - n * 6 < 7) {
            if (col < 14) {
              a[i][col] = dominoS[i - n * 6][col];
            }
          } else {
            if (col >= ((i - n * 6) / 7) * 7 && col < ((i - n * 6) / 7 + 2) * 7) {
              a[i][col] = dominoS[(i - n * 6) % 7][col % 14];
            }
          }
        }
      }
    }

    //printArray(a);

    return a;
  }

  private void printArray(int[][] array) {
    StringBuilder s = new StringBuilder();

    for (int i = 0; i < array.length; i++) {
      s.append(" " + i + "[");
      for (int j = 0; j < array[i].length; j++) {
        s.append(array[i][j]);
        if (j != array[i].length - 1) {
          s.append(", ");
        }
      }
      s.append("]\n");
    }
    System.out.println(s);
  }

  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    while (true) {
      int n;
      System.out.println("Geben Sie eine Zahl ein");
      try {
        n = Integer.parseInt(scanner.nextLine());
      } catch (NumberFormatException e) {
        n = -1;
        System.err.println("NumberFormatExeption");
      }

      new DLXPentominoDLUXv2(n);


    }
  }

}
